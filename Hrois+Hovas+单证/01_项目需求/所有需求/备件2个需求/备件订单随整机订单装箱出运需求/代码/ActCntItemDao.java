/*
 * Powered By [rapid-framework]
 * Web Site: http://www.rapid-framework.org.cn
 * Google Code: http://code.google.com/p/rapid-framework/
 * Since 2008 - 2013
 */

package com.haier.hrois.order.cnt.dao;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.haier.base.dao.BaseMybatisDao;
import com.haier.hrois.order.cnt.domain.ActCntItem;
import com.haier.hrois.order.cnt.query.ActCntItemQuery;
import com.haier.openplatform.util.Pager;

/**
 * database table: ACT_CNT_ITEM database table comments: 装箱明细表 This file is
 * generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be
 * OVERWRITTEN by someone else. To modify the file, you should go to directory
 * <tt>(project-home)/dalgen</tt>
 * 
 * @author badqiu(zhongxuan)
 * 
 */
@Repository
public class ActCntItemDao extends BaseMybatisDao<ActCntItem, java.lang.String> {
	

	@Override
	public String getMybatisMapperNamesapce() {
		return "ActCntItem";
	}

	@Override
	public void saveOrUpdate(ActCntItem entity) {
		if (entity.getActCntItemCode() == null){
			save(entity);
		}else{
			update(entity);
		}
	}

	public Pager findPage(ActCntItemQuery query) {
		return pageQuery("ActCntItem.findPage", query);
	}

	public ActCntItem get(ActCntItemQuery query) {
		List<ActCntItem> list = this.getSqlSession().selectList("ActCntItem.get", query);
		return list != null && list.size() > 0 ? list.get(0) : null;
	}

	/*
	 * 根据订舱号 查询箱型 箱量 author wangXin
	 */
	public List<ActCntItem> queryTypeQuentity(String bookCode) {
		ActCntItem actCntItem = new ActCntItem();
		actCntItem.setOrderNum(bookCode);// 用订单号保存订舱号
		List<ActCntItem> list = this.getSqlSession().selectList("ActCntItem.queryType.quentity", actCntItem);
		return list;
	}

	/**
	 * 获取已分配总数量 author gechao
	 */
	public Long getTotalNum(ActCntItemQuery query) {
		return this.getSqlSession().selectOne("ActCntItem.getTotalNum", query);
	}

	/**
	 * @author guomm 通过装箱预编号查询订单号
	 * @param loadingPlanCode
	 * @return
	 */
	public List<String> getOrderCodeByLoadingPlanCode(String[]loadingPlanCode) {
		return this.getSqlSession().selectList("ActCntItem.getOrderCodeByLoadingPlanCode", loadingPlanCode);
	}
	public List<String> getOrderCodeByLoadingPlan(String loadingPlanCode) {
		return this.getSqlSession().selectList("ActCntItem.getOrderCodeByLoadingPlan", loadingPlanCode);
	}
   
	/**
	 * @author Guomm
	 * @param loadingPlanCode
	 * @param orderCode
	 * @return
	 */
	public List<Map<String, String>> findSendData(String orderCode) {
		// ActCntItem item = new ActCntItem();
		// item.setActCntCode(loadingPlanCode);
		// item.setOrderNum(orderCode);
		return this.getSqlSession().selectList("ActCntItem.getSendData", orderCode);
	}

	/**
	 * @author guomm 通过订舱预编号查询预编号下的订舱明细
	 * @param loadingPlanCode
	 * @return
	 */
	public List<ActCntItemQuery> findActCntItem(String loadingPlanCode) {
		return this.getSqlSession().selectList("ActCntItem.getActCntItem", loadingPlanCode);
	}
    
	/**
	 * @author guomm 通过装箱明细编码更新扫描数量
	 * @param actCntItem
	 * @return
	 */
	public Integer updActCntItemScanQuantity(ActCntItem actCntItem) {
		return this.getSqlSession().update("ActCntItem.updActCntItemScanQuantity", actCntItem);
	}
	/**
	 * 根据订单明细进行跟新扫描数量
	 */	
	public Integer updActCntItemScan(ActCntItem actCntItem) { 
			return this.getSqlSession().update("ActCntItem.updActCntItemScan", actCntItem);
		}
	
	/**
	 * DESCRIPTION:更新装箱主表   回想时间、集装箱号、封箱状态
	 * @param orderCode
	 * @return
	 */
	public Integer updateMainStatus(String orderCode){
		return this.getSqlSession().update("ActCntItem.updateMainStatus", orderCode);
	}
	
	/**
	 * 通过装箱预编号获取装箱信息
	 * @param loadingPlanCode
	 * @return
	 */
	public List<ActCntItemQuery> getCntItemByLoadingPlanCode(String actCntItemCode) {
		return	getSqlSession().selectList("ActCntItem.getFactoryCode",actCntItemCode);
	
		
	}
	
	/**
	 * @author guomm 通过订单编码获得装箱预编号
	 * @param orderCode
	 * @return
	 */
	public List<String> getLoadingPlanCodeByOrderCode(String orderCode) {
		return this.getSqlSession().selectList("ActCntItem.getLoadingPlanCodeByOrderCode", orderCode);
	}

	/**
	 * 获得已发送工厂，但未完成装箱的装箱预编号
	 * 
	 * @return
	 */
	public List<ActCntItem> getNoScanOkOrderCode() {
		return this.getSqlSession().selectList("ActCntItem.getNoScanOkOrderCode");
	}

	/**
	 * 通过订单编码查询装箱预算明细
	 * 
	 * @return
	 */
	public List<ActCntItem> getCntItemByOrderCode(String orderCode) {
		return this.getSqlSession().selectList("ActCntItem.findCntItemByOrderCode",orderCode);
	}
    /**
     * 根据装箱预编号查询数据
     */
     public List<ActCntItem> getCntBagCode(String actCntItemCode){
    	 return this.getSqlSession().selectList("ActCntItem.getCntBagCode",actCntItemCode);
     }
	/**
	 * @author zhangjk
	 * @2013-8-6
	 * @description 根据标准箱方案号、集装箱序号、订单号查询装箱明细所需要的数据
	 * @param query
	 * @return
	 */
	public List<ActCntItemQuery> listActCntItem(ActCntItemQuery query) {
		return this.getSqlSession().selectList("ActCntItem.listActCntItem",query);
	}

	/**
	 * @author
	 * @description 拆箱删数据
	 */
	public void deleteByActcntCode(String actCntCode) {
		this.getSqlSession().delete("ActCntItem.deleteByActcntCode", actCntCode);
	}
	
	/** 
	* @Description: 根据主键删除装箱明细
	* @author 韩建效 hanjianxiao@jbinfo.cn 
	* @date 2016-7-27 下午4:04:35 
	* @param actCntItemCode  
	*/ 
	public void deleteByActcntItemCode(String actCntItemCode) {
		this.getSqlSession().delete("ActCntItem.deleteByActcntItemCode", actCntItemCode);
	}
	
	public List<ActCntItem> getByActcntCode(String actCntCode) {
		return this.getSqlSession().selectList("ActCntItem.getByActcntCode",actCntCode);
	}
	
	/**
	 * @author zhangjk
	 * @2013-8-30
	 * @description 添加
	 * @param t
	*/
	public void addCntItem(ActCntItem cntItem) {
		this.getSqlSession().insert("ActCntItem.addCntItem", cntItem);
	}
	
	/**
	 * @author zhangjk
	 * @2013-8-30
	 * @description 修改
	 * @param orderCode
	*/
	public int deleteActItem(String orderCode){
		return this.getSqlSession().delete("ActCntItem.deleteActItem", orderCode);
	}
	
	public Date getMaxBackCntDateByOrderCode(String orderCode){
		return this.getSqlSession().selectOne("ActCntItem.getMaxBackCntDateByOrderCode", orderCode);
	}
	
	/**
	 * @author gechao 通过订单编码获得流程KEY
	 * @param orderCode
	 * @return
	 */
	public List<String> getTaskDefKeyList(String orderCode) {
		return this.getSqlSession().selectList("ActCntItem.getTaskDefKeyList", orderCode);
	}
	
	/**
	 * @author gechao 通过订单编码获得流程ID
	 * @param orderCode
	 * @return
	 */
	public List<String> getProcessIdByOrderCode(String orderCode) {
		return this.getSqlSession().selectList("ActCntItem.getProcessIdByOrderCode", orderCode);
	}
	
	/**
	 * @author gechao 发送邮箱查询
	 * @param orderCode
	 * @return
	 */
	public List<String> getEmailByActCntCode(String code) {
		return this.getSqlSession().selectList("ActCntItem.sendEmail", code);
	}
	
	/**
	 * @author gechao 根据订单号和装箱预编号查询 数量
	 * @param orderNum actcntCode 
	 * @return
	 */
	public Long getSumNumberByOrderCode(ActCntItemQuery actCntItemQuery) {
		return this.getSqlSession().selectOne("ActCntItem.getSumNumber", actCntItemQuery);
	}
	
	/**
	 * 根据预编号查询物料个数
	 * @param loadingPlanCode
	 * @return
	 */
	public List<String> getMaterialByLoadingPlanCode(String loadingPlanCode) {
		return this.getSqlSession().selectList("ActCntItem.getMaterialByLoadingPlanCode", loadingPlanCode);
	}

	/** @Title: copyCntItemToReturn
	 * @Description: 复制数据到return表
	 * @param actCntCode
	 * @date 2018年11月21日
	*/
	public void copyCntItemToReturn(String actCntCode) {
		this.getSqlSession().insert("ActCntItem.copyCntItemToReturn", actCntCode);
	}
	
	/**
	 * DESCRIPTION:更新装箱主表   回想时间、集装箱号、封箱状态
	 * @param orderCode
	 * @return
	 */
	public Integer updateMainStatusWithSapFlag(String orderCode){
		return this.getSqlSession().update("ActCntItem.updateMainStatusWithSapFlag", orderCode);
	}
	
	/**
	 * 箱封号更新，主表传输Hope标志
	 * @param orderCode
	 * @return
	 */
	public Integer updateMainSAPFLAGByOrderCode(Map<String,String> actCntMap){
		return this.getSqlSession().update("ActCntItem.updateMainSAPFLAGByOrderCode",actCntMap);
	}
	/**
	 * 通过订单编码查询装箱预算明细
	 * 
	 * @return
	 */
	public List<ActCntItem> getCntItemByOrderCodeAndLoadCode(Map<String,String> actItem) {
		return this.getSqlSession().selectList("ActCntItem.findCntItemByOrderCodeAndLoadCode",actItem);
	}
	
	/**
	 * 获取变更箱封号邮件内容
	 * @param actCntItemCode
	 */
	public Map<String,String> getEmailContent(String actCntItemCode){
		return this.getSqlSession().selectOne("ActCntItem.getEmailContent",actCntItemCode);
	}
	
	/**
	 * 装箱跟踪-判断订单是否出运
	 * @param orderCode
	 * @return
	 */
	public Integer getIsChuYunOrder(String orderCode){
		return this.getSqlSession().selectOne("ActCntItem.getIsChuYunOrder",orderCode);
	}
	
	
	/**
	 * 备件订单随整机装箱扫描发货
	 * 更新整机装箱信息，关联备件订单
	 * 2020-03-24  YXB
	 * @param actCntItemQuery
	 */
	public void updateAttachOrder(ActCntItemQuery actCntItemQuery){
		this.getSqlSession().update("ActCntItem.updateAttachOrder",actCntItemQuery);
	}
	
	/**
	 * 备件订单随整机装箱扫描发货
	 * 根据备件订单号查询关联装箱的并且已经发送工厂的整机订单号
	 * 2020-03-24  YXB
	 * @param attachOrder
	 */
	public List<String> selectOrderLoadingStatus(String attachOrder){
		return this.getSqlSession().selectList("ActCntItem.selectOrderLoadingStatus", attachOrder);
	}
	
	/**
	 * 备件订单随整机装箱扫描发货
	 * 删除备件订单与整机订单装箱信息关联关系
	 * 2020-03-24  YXB
	 * @param attachOrder
	 */
	public void deleteLoadingAttachOrder(String attachOrder){
		this.getSqlSession().update("ActCntItem.deleteLoadingAttachOrder", attachOrder);
	}
	
	/**
	 * 备件订单随整机装箱扫描发货
	 * 根据整机订单号更新一起装箱发运的备件订单号
	 * 2020-03-24  YXB
	 * @param attachOrder
	 */
	public void updateLoadingAttachOrder(String orderCode){
		this.getSqlSession().update("ActCntItem.updateLoadingAttachOrder", orderCode);
	}
	
	
}
